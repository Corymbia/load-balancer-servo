#!/usr/bin/python -tt

pid_file = "/var/run/eucaservo/euca-balancer-servo.pid"
import atexit
import os
import servo
import sys
import fcntl
import getopt
import signal

def cleanpid(signum=None, action=None):
    os.remove(pid_file)
    sys.exit(0)

def daemonize(func=None):
    # Fork process
    procid = os.fork()
    if procid < 0:
        sys.exit(1)
    elif procid > 0:
        sys.exit(0)
    procid = os.setsid()
    if procid == -1:
        sys.exit(1)

    # Close open file descriptors
    for fd  in (0, 1):
        try:
            os.close(fd)
        except OSError:
            pass
    # Point descriptors to /dev/null
    os.open("/dev/null", os.O_RDWR)
    os.dup(0)
    os.dup(0)

    os.umask(027)
    os.chdir("/")

    # Create pidfile
    try:
        f = open(pid_file, "w")
        fcntl.lockf(f, fcntl.LOCK_EX | fcntl.LOCK_NB)
        f.write(str(os.getpid()))
        f.flush()
    except IOError, err:
        sys.exit(1)
    signal.signal(signal.SIGTERM, cleanpid)
    atexit.register(cleanpid)

    if func:
        func()

if __name__ == "__main__":
    daemon = False
    config_file = None
    try:
        opts, _ = getopt.getopt(sys.argv[1:],
            "hdc:", ["--help", "--daemonize", "--config", "--pidfile"])
        for arg, value in opts:
            if arg == "-d" or arg == "--daemonize":
                daemon = True
            elif arg == "-p" or arg == "--pidfile":
                pid_file = value
            elif arg == "-c" or arg == "--config":
                config_file = value
            elif arg == "-h" or arg == "--help":
                usage()
    except getopt.GetoptError:
        usage()

    if daemon:
        # write log using pid in filename. Write new file so in case there is a pid collision over time,
        # we don't have confusing logs containing 2 different processes output
        daemonize(servo.start_servo)
    else:
        try:
            servo.start_servo()
        except KeyboardInterrupt:
            sys.exit(0)

