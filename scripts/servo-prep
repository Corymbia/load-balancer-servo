#!/usr/bin/python -tt
#
# Copyright 2016 Hewlett Packard Enterprise Development Company LP.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 3 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/.
#
# Please contact Hewlett Packard Enterprise Development Company LP., 6755 Hollister Ave., Goleta
# CA 93117, USA or visit http://www.eucalyptus.com/licenses/ if you need
# additional information or have any questions.

import filecmp
import os
import os.path
import re
import shutil
import subprocess
import sys
import syslog
import tempfile
import httplib2
import time
from netaddr import IPNetwork
import servo.config as config

lock_file = '/var/lib/load-balancer-servo/ntp.lock'
SERVER_RE = re.compile(r'^server')
ADDR_RE = re.compile(r'^[a-zA-Z0-9\.\-]+$')

def backup_orig():
    # Back up the original just in case
    if not os.path.exists('/etc/ntp.conf.orig'):
        syslog.syslog("Writing original config to /etc/ntp.conf.orig")
        shutil.copyfile('/etc/ntp.conf', '/etc/ntp.conf.orig')


def leave_lock():
    try:
        open(lock_file, 'w').close()
    except Exception:
        syslog.syslog("Unable to leave ntp lock file")

def query_metadata(url):
    try:
        resp, content = httplib2.Http().request(url)
        if resp['status'] != '200' or len(content) <= 0:
            return None
        return content 
    except Exception, err:
        return None

def is_vpc():
    PRIMARY_DEVICE='eth0'
    with open('/sys/class/net/%s/address' % PRIMARY_DEVICE,'r') as f:
        primary_mac = f.readline()
    if not primary_mac or len(primary_mac) <= 0:
        raise Exception("Primary mac address is not found")

    url = "http://169.254.169.254/latest/meta-data/network/interfaces/macs/%s/vpc-id" % primary_mac
    vpc_id = query_metadata(url) 
     # check if vpc-id is present, then keep a note of primary mac id 
    if not vpc_id:
        return False
    return True

def check_redis():
    try:
        subprocess.check_call(["/usr/bin/systemctl","status", "redis"])
    except subprocess.CalledProcessError as ex: 
        syslog.syslog("Starting Redis...")
        try: 
            subprocess.check_call(["/usr/bin/systemctl","start", "redis"])
        except Exception, err:
            syslog.syslog("Failed to start Redis") 

syslog.openlog(sys.argv[0])
syslog.syslog("Start Checking Network Interfaces")
try:
    PRIMARY_DEVICE='eth0'
    SECONDARY_DEVICE='eth1'
    IF_UP_CMD = '/usr/sbin/ec2ifup'
    # test if instance is in VPC
    if not is_vpc():
        syslog.syslog("VPC ID for primary interface is not found")
    else:
        # keep checking secondary mac 
        secondary_mac = None
        while not secondary_mac:
            try:
                if not os.path.exists('/sys/class/net/%s/address' % SECONDARY_DEVICE):
                    time.sleep(5)
                    syslog.syslog("Waiting for secondary interface")
                    continue
                else:
                    with open('/sys/class/net/%s/address' % SECONDARY_DEVICE,'r') as f:
                        secondary_mac = f.readline()
            except Exception, err:
                syslog.syslog("Exception while checking secondary mac address: %s" % err)
                time.sleep(5)
        syslog.syslog("Secondary mac address is found: %s" % secondary_mac)
       
        # if secondary mac is found, do 'ec2ifup eth1'
        for x in range(0, 3):
            try:
               subprocess.check_call([IF_UP_CMD, SECONDARY_DEVICE])
               break
            except subprocess.CalledProcessError as ex:
               syslog.syslog("%s eth1 failed: retrying...%d/5" % (IF_UP_CMD, x+1))
               time.sleep( (x+1)*2 )

        # wait until eth1 gets IP
        secondary_ip = None
        while True:
            try:
                proc = subprocess.Popen(['/usr/sbin/ip','addr','show','dev', SECONDARY_DEVICE], stdout=subprocess.PIPE)
                if proc and proc.stdout:
                    while True:
                        line = proc.stdout.readline()
                        if not line or len(line) <= 0:
                            break
                        else:
                            if line.find('inet') >= 0 and line.find('inet6') < 0:
                                tokens = line.split()
                                tokens = tokens[1].split('/')
                                secondary_ip = tokens[0]
                                break
            except Exception, err:
                syslog.syslog("Failed to check secondary interface's IP: %s" % err)
            if secondary_ip:
                break
            else:
                syslog.syslog("Waiting for secondary interface's IP")
                time.sleep(5)
        syslog.syslog("Secondary interface's IP address: %s" % secondary_ip)
 
        # do ifup-routes
        try:
            subprocess.check_call(['/etc/sysconfig/network-scripts/ifup-routes', SECONDARY_DEVICE])
        except subprocess.CalledProcessError as ex:
            raise Exception("Failed to call ifup-routes")
        syslog.syslog("All network interfaces are ready")
  
        # setup routes for secondary interface's vpc-wide cidr
        try:    
            secondary_mac = secondary_mac.strip()
            url = 'http://169.254.169.254/latest/meta-data/network/interfaces/macs/%s/vpc-ipv4-cidr-block' % secondary_mac
            vpc_cidr = query_metadata(url)
            if  vpc_cidr is None or len(vpc_cidr) <= 0:
                raise Exception("Failed to find vpc's cidr range")
            router_ip = IPNetwork(vpc_cidr)[1]
            subprocess.check_call(['/usr/sbin/ip','route','add', vpc_cidr, 'via', str(router_ip)]) 
            syslog.syslog("Successfully setup VPC route for secondary interface")
        except Exception, err:
            syslog.syslog("Failed to setup VPC route for secondary interface: %s" %  err)
except Exception, err:
    syslog.syslog("Failed to check VPC network interfaces: %s" % err)

syslog.syslog("Starting NTP server check")
try:
    ntp_servers = config.get_ntp_server_url()
except Exception:
    check_redis()
    leave_lock()
    sys.exit(1)

backup_orig()

valid_servers = []

if ntp_servers:
    # filter out entries with invalid characters (e.g., whitespace)
    for server in ntp_servers.split(','):
        if ADDR_RE.match(server):
            valid_servers.append(server)
        else:
            syslog.syslog("Found invalid NTP server value")

if valid_servers:
    syslog.syslog("Found NTP server(s) in userdata: {0}".format(valid_servers))
    tmpfile = tempfile.NamedTemporaryFile(prefix='ntp-update')
    with open('/etc/ntp.conf.orig', 'r') as ntpfile:
        for line in ntpfile.readlines():
            if SERVER_RE.search(line):
                tmpfile.write('# {0}'.format(line))
            else:
                tmpfile.write(line)
    for server in valid_servers:
        tmpfile.write("server {0}\n".format(server))
    tmpfile.flush()
    if not filecmp.cmp('/etc/ntp.conf', tmpfile.name):
        syslog.syslog("Stopping ntpd")
        try:
            subprocess.check_call(['/sbin/service', 'ntpd', 'stop'])
        except subprocess.CalledProcessError as ex:
            syslog.syslog("Failed to stop ntpd")
        syslog.syslog("Updating NTP configuration")
        shutil.move('/etc/ntp.conf', '/etc/ntp.conf.bak')
        shutil.copyfile(tmpfile.name, '/etc/ntp.conf')
        os.chmod('/etc/ntp.conf', 0644)
        os.chown('/etc/ntp.conf', 0, 0)
        try:
            syslog.syslog("Running ntpdate against {0}".format(valid_servers[0]))
            subprocess.check_call(['/usr/sbin/ntpdate', valid_servers[0]])
        except subprocess.CalledProcessError as ex:
            syslog.syslog("Running ntpdate failed, unable to contact server")
        try:
            syslog.syslog("Starting ntpd")
            subprocess.check_call(['/sbin/service', 'ntpd', 'start'])
        except subprocess.CalledProcessError as ex:
            syslog.syslog("Failed to start ntpd")
else:
    syslog.syslog("No NTP server specified")

check_redis()
leave_lock()
